{
 "add_total_row": 1,
 "columns": [],
 "creation": "2024-06-11 18:06:42.218612",
 "disable_prepared_report": 0,
 "disabled": 0,
 "docstatus": 0,
 "doctype": "Report",
 "filters": [
  {
   "fieldname": "from_date",
   "fieldtype": "Date",
   "label": "From Date",
   "mandatory": 1,
   "wildcard_filter": 0
  },
  {
   "fieldname": "to_date",
   "fieldtype": "Date",
   "label": "To Date",
   "mandatory": 1,
   "wildcard_filter": 0
  }
 ],
 "idx": 0,
 "is_standard": "Yes",
 "letter_head": "",
 "modified": "2024-06-11 18:06:42.218612",
 "modified_by": "Administrator",
 "module": "CSF TZ",
 "name": "Customer GL Entries by Fiscal Year",
 "owner": "Administrator",
 "prepared_report": 0,
 "ref_doctype": "GL Entry",
 "report_name": "Customer GL Entries by Fiscal Year",
 "report_script": "def get_unique_fiscal_years(raw_data):\n    # Extract unique fiscal years from raw data\n    return sorted(set(row['fiscal_year'] for row in raw_data))\n\ndef get_columns(fiscal_years):\n    # Build the columns dynamically based on unique fiscal years\n    columns = [_(\"Party\") + \":Link/Customer:120\", _(\"Account\") + \":Link/Account:120\"]\n    columns.extend(_(year) + \":Currency:100\" for year in fiscal_years)\n    return columns\n\ndef get_data(filters):\n    # Fetch data from the database\n    results = frappe.db.sql(\"\"\"\n        SELECT\n            party,\n            account,\n            fiscal_year,\n            SUM(debit - credit) as balance\n        FROM\n            `tabGL Entry`\n        WHERE\n            party_type = \"Customer\"\n            AND is_cancelled = 0\n            AND posting_date between %(from_date)s and %(to_date)s\n        GROUP BY\n            party, account, fiscal_year\n    \"\"\", filters, as_dict=True)\n    return results\n\ndef build_data(raw_data, fiscal_years):\n    # Initialize a dictionary to store balances by party, account, and fiscal year\n    data_dict = {}\n    \n    # Populate the dictionary with balances\n    for row in raw_data:\n        party = row['party']\n        account = row['account']\n        fiscal_year = row['fiscal_year']\n        balance = row['balance']\n        \n        if (party, account) not in data_dict:\n            data_dict[(party, account)] = {fy: 0 for fy in fiscal_years}\n        \n        data_dict[(party, account)][fiscal_year] = balance\n    \n    # Convert the dictionary to a list of lists for the report\n    data = []\n    for (party, account), balances in data_dict.items():\n        row = [party, account]\n        row.extend(balances[fiscal_year] for fiscal_year in fiscal_years)\n        data.append(row)\n    \n    return data\n\nraw_data = get_data(filters)\nfiscal_years = get_unique_fiscal_years(raw_data)\ncolumns = get_columns(fiscal_years)\nresult_data = build_data(raw_data, fiscal_years)\n\n\ndata = columns, result_data",
 "report_type": "Script Report",
 "roles": [
  {
   "role": "Accounts User"
  },
  {
   "role": "Accounts Manager"
  },
  {
   "role": "Auditor"
  }
 ]
}